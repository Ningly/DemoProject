<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--配置service-->
    <bean id="customerService" class="com.Service.Imp.CustomerService"></bean>
    
    <!--基于xml的aop配置步骤：要想使用spring的aop，必须导入aop的Jar包-->
    <!--第一步：把通知类交给spring来管理-->
    <bean id="logger" class="com.utils.Logger"></bean>
    <!--第二步：导入aop名称空间，并且使用aop:config开始aop的配置-->
    <aop:config>
        <!--定义通用的切入点表达式：如果是写在了aop:aspect标签外部，则表示所有切面可用-->
        <aop:pointcut id="pt" expression="execution(* com.Service.Imp.*.*(..))"></aop:pointcut>
        <!--第三步：使用aop:aspect配置切面 id属性用于给切面提供一个唯一的标识。 ref属性：用于应用通知的Bean的Id-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--第四步：配置通知的类型，指定增强的方法何时执行。 method属性：用于指定增强的方法名称 pointcut属性：用于指定切入点表达式-->
            <!--切入点表达式：
                关键字：execution(表达式)
                表达式写法：
                    访问修饰符 返回值 包名.包名....类名.方法名(参数列表)
                全匹配方式：
                    public void com.Service.Imp.CustomerService.saveCustomer()
                访问修饰符可以省略：
                    void com.Service.Imp.CustomerService.saveCustomer()
                返回值可以使用通配符，表示任意返回值。通配符是*
                    * com.Service.Imp.CustomerService.saveCustomer()
                包名可以使用通配符，表示任意包。但是，有几个包就需要写几个*
                    * *.*.*.CustomerService.saveCustomer()
                包名可以使用..表示当前包及其子包
                    * com..CustomerService.saveCustomer()
                类名和方法名都可以使用通配符
                    * com..*.*()
                参数列表可以使用具体类型，来表示参数类型
                    基本类型直接写类型名称：int     * com..*.*(int)
                    引用类型必须是包名.类名：java.lang.Integer
                参数列表可以使用通配符，表示任意参数类型，但是必须有参数
                    * com..*.*(*)
                参数列表可以使用..表示用无参数即可，有参数可以是任意类型
                    * com..*.*(..)
                全通配方式：
                    * *..*.*(..)
                实际开发中，我们一般情况下，都是对业务层方法进行增强：
                    写法：* com.Service.Imp.*.*(..)
                -->
            <!--<aop:before method="printLog" pointcut="execution(* com.Service.Imp.*.*(..))"/>-->
            <aop:before method="printLog" pointcut-ref="pt"/>
            <!--定义通用的切入点表达式：如果是写在了aop:aspect标签内部，则表示只有当前切面可用-->
            <!--<aop:pointcut id="pt" expression="execution(* com.Service.Imp.*.*(..))"></aop:pointcut>-->
        </aop:aspect>
    </aop:config>
</beans>





























